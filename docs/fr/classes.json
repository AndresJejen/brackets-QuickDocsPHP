{"DateTime":{"add":{"s":"Ajoute une dur\u00e9e \u00e0 un objet DateTime","y":"public DateTime DateTime::add\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"interval","d":"Un objet DateInterval"}]},"__construct":{"s":"Retourne un nouvel objet DateTime","y":"","p":[{"t":"time","d":"Une cha\u00eene date\/heure. Les formats valides sont expliqu\u00e9s dans la documentation sur les\nformats Date et Heure."},{"t":"timezone","d":"Un objet DateTimeZone representant\n       le fuseau horaire de $time."}]},"createFromFormat":{"s":"Retourne un nouvel objet DateTime format\u00e9","y":"public static DateTime DateTime::createFromFormat\n    ( string $format\n   , string $time\n   [, DateTimeZone $timezone\n  ] )","p":[{"t":"format","d":"Le format \u00e0 utiliser. Voir les options de formatage ci-dessous.\n      Dans le plupart des cas, les m\u00eames lettres que pour la fonction\n      date() peuvent \u00eatre utilis\u00e9es."},{"t":"time","d":"Cha\u00eene repr\u00e9sentant l&#039;heure."},{"t":"timezone","d":"Un objet DateTimeZone repr\u00e9sentant\n      le fuseau horaire d\u00e9sir\u00e9."}]},"getLastErrors":{"s":"Retourne les derni\u00e8res erreurs et alertes","y":"public static array DateTime::getLastErrors\n    ( void\n   )","p":null},"modify":{"s":"Modifie le timestamp","y":"public DateTime DateTime::modify\n    ( string $modify\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"modify","d":"Une cha\u00eene date\/heure. Les formats valides sont expliqu\u00e9s dans la documentation sur les\nformats Date et Heure."}]},"__set_state":{"s":"Le gestionnaire __set_state","y":"public static DateTime DateTime::__set_state\n    ( array $array\n   )","p":[{"t":"array","d":"Le tableau d&#039;initialisation."}]},"setDate":{"s":"Assigne la date","y":"public DateTime DateTime::setDate\n    ( int $year\n   , int $month\n   , int $day\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"year","d":"Ann\u00e9e de la date."},{"t":"month","d":"Mois de la date."},{"t":"day","d":"Jour de la date."}]},"setISODate":{"s":"Configure une date ISO","y":"public DateTime DateTime::setISODate\n    ( int $year\n   , int $week\n   [, int $day = 1\n  ] )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"year","d":"L&#039;ann\u00e9e de la date."},{"t":"week","d":"Le num\u00e9ro de la semaine."},{"t":"day","d":"D\u00e9calage par rapport au premier jour de la semaine."}]},"setTime":{"s":"Assigne l&#039;heure","y":"public DateTime DateTime::setTime\n    ( int $hour\n   , int $minute\n   [, int $second = 0\n  ] )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"hour","d":"Heure du moment."},{"t":"minute","d":"Minute du moment."},{"t":"second","d":"Seconde du moment."}]},"setTimestamp":{"s":"Assigne la date et l&#039;heure \u00e0 l&#039;aide d&#039;un timestamp Unix","y":"public DateTime DateTime::setTimestamp\n    ( int $unixtimestamp\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"unixtimestamp","d":"Timestamp Unix repr\u00e9sentant la date et l&#039;heure."}]},"setTimezone":{"s":"Configure le fuseau horaire de l&#039;objet DateTime","y":"public DateTime DateTime::setTimezone\n    ( DateTimeZone $timezone\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"timezone","d":"Un objet DateTimeZone repr\u00e9sentant\n      le fuseau horaire d\u00e9sir\u00e9."}]},"sub":{"s":"Soustrait une dur\u00e9e \u00e0 un objet DateTime","y":"public DateTime DateTime::sub\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"interval","d":"Un objet DateInterval"}]}},"ArrayObject":{"append":{"s":"Ajoute la valeur \u00e0 la fin d&#039;un tableau","y":"public void ArrayObject::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"La valeur ajout\u00e9e."}]},"asort":{"s":"Trie les \u00e9l\u00e9ments par valeur","y":"public void ArrayObject::asort\n    ( void\n   )","p":null},"__construct":{"s":"Construit un nouvel objet tableau","y":"","p":[{"t":"input","d":"Le param\u00e8tre input accepte\n       un tableau ou un autre objet."},{"t":"flags","d":"Option de contr\u00f4le du comportement de \n       l&#039;objet ArrayObject.\n       Voir la m\u00e9thode ArrayObject::setFlags()."},{"t":"iterator_class","d":"Sp\u00e9cifie la classe qui sera utilis\u00e9e pour les it\u00e9rations\n       de l&#039;objet ArrayObject."}]},"count":{"s":"Retourne le nombre de propri\u00e9t\u00e9s publiques dans l&#039;objet ArrayObject","y":"public int ArrayObject::count\n    ( void\n   )","p":null},"exchangeArray":{"s":"Remplace un tableau par un autre","y":"public array ArrayObject::exchangeArray\n    ( mixed $input\n   )","p":[{"t":"input","d":"Le nouveau tableau ou objet \u00e0 utiliser."}]},"getArrayCopy":{"s":"Cr\u00e9e une copie de l&#039;objet ArrayObject","y":"public array ArrayObject::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"Lit les options de comportement","y":"public int ArrayObject::getFlags\n    ( void\n   )","p":null},"getIterator":{"s":"Cr\u00e9e un nouvel it\u00e9rateur \u00e0 partir d&#039;un objet ArrayObject","y":"public ArrayIterator ArrayObject::getIterator\n    ( void\n   )","p":null},"getIteratorClass":{"s":"Lit le nom de la classe de ArrayObject","y":"public string ArrayObject::getIteratorClass\n    ( void\n   )","p":null},"ksort":{"s":"Trie un tableau par cl\u00e9","y":"public void ArrayObject::ksort\n    ( void\n   )","p":null},"natsort":{"s":"Trie les \u00e9l\u00e9ments avec un tri naturel","y":"public void ArrayObject::natsort\n    ( void\n   )","p":null},"offsetExists":{"s":"V\u00e9rifie si un index existe","y":"public bool ArrayObject::offsetExists\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 v\u00e9rifier."}]},"offsetGet":{"s":"Retourne la valeur de l&#039;index sp\u00e9cifi\u00e9","y":"public mixed ArrayObject::offsetGet\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index demand\u00e9."}]},"offsetSet":{"s":"D\u00e9finie $newval comme valeur \u00e0 l&#039;$index sp\u00e9cifi\u00e9","y":"public void ArrayObject::offsetSet\n    ( mixed $index\n   , mixed $newval\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 d\u00e9finir."},{"t":"newval","d":"La nouvelle valeur de l&#039;index index."}]},"offsetUnset":{"s":"Efface la valeur \u00e0 l&#039;$index sp\u00e9cifi\u00e9","y":"public void ArrayObject::offsetUnset\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 effacer."}]},"serialize":{"s":"Lin\u00e9arise un ArrayObject","y":"public string ArrayObject::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"Configure les options de comportement","y":"public void ArrayObject::setFlags\n    ( int $flags\n   )","p":[{"t":"flags","d":"Le nouveau comportement ArrayObject. \n       Cela peut \u00eatre un champ de bits ou des constantes nomm\u00e9es. L&#039;utilisation\n       des constantes est fortement encourag\u00e9e, pour assurer la compatibilit\u00e9\n       avec les futures versions."}]},"setIteratorClass":{"s":"D\u00e9finit le nom de la classe de l&#039;it\u00e9rateur pour l&#039;objet ArrayObject","y":"public void ArrayObject::setIteratorClass\n    ( string $iterator_class\n   )","p":[{"t":"iterator_class","d":"Le nom de la classe de l&#039;it\u00e9rateur \u00e0 utiliser pour it\u00e9rer sur cet\n       objet."}]},"uasort":{"s":"Trie les \u00e9l\u00e9ments avec une fonction utilisateur","y":"public void ArrayObject::uasort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction cmp_function doit accepter\n       deux param\u00e8tres, qui contiendront les \u00e9l\u00e9ments.\n       La fonction de comparaison doit retourner un entier qui peut\n       \u00eatre n\u00e9gatif, nul ou positif, suivant que le premier \n       param\u00e8tre est consid\u00e9r\u00e9 comme inf\u00e9rieur, \u00e9gal ou sup\u00e9rieur\n       au second."}]},"uksort":{"s":"Trie les \u00e9l\u00e9ments par cl\u00e9 avec une fonction utilisateur","y":"public void ArrayObject::uksort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de rappel pour les comparaisons."}]},"unserialize":{"s":"D\u00e9lin\u00e9arisation d&#039;un ArrayObject","y":"public void ArrayObject::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"L&#039;objet ArrayObject lin\u00e9aris\u00e9."}]}},"Directory":{"close":{"s":"Ferme le gestionnaire de dossier","y":"public void Directory::close\n    ([ resource $dir_handle\n  ] )","p":null},"read":{"s":"Lit une entr\u00e9e depuis le gestionnaire de dossier","y":"public string Directory::read\n    ([ resource $dir_handle\n  ] )","p":null},"rewind":{"s":"R\u00e9initialise le gestionnaire de dossier","y":"public void Directory::rewind\n    ([ resource $dir_handle\n  ] )","p":null}},"DirectoryIterator":{"__construct":{"s":"Construit un nouvel it\u00e9rateur de dossier \u00e0 partir d&#039;un chemin","y":"","p":[{"t":"path","d":"Le chemin du dossier \u00e0 parcourir."}]},"current":{"s":"Retourne l&#039;\u00e9l\u00e9ment courant du DirectoryIterator","y":"public DirectoryIterator DirectoryIterator::current\n    ( void\n   )","p":null},"getATime":{"s":"Lit la date et l&#039;heure du dernier acc\u00e8s \u00e0 un fichier","y":"public int DirectoryIterator::getATime\n    ( void\n   )","p":null},"getBasename":{"s":"Lit le nom de dossier de l&#039;\u00e9l\u00e9ment DirectoryIterator","y":"public\n   string \n   DirectoryIterator::getBasename\n    ([ \n    string\n     $suffix\n   \n  ] )","p":[{"t":"suffix","d":"Si le nom du dossier se termine par le suffixe suffix, \n       il sera retir\u00e9."}]},"getCTime":{"s":"R\u00e9cup\u00e8re l&#039;heure de cr\u00e9ation de l&#039;inode d&#039;un fichier","y":"public int DirectoryIterator::getCTime\n    ( void\n   )","p":null},"getExtension":{"s":"R\u00e9cup\u00e8re l&#039;extension du fichier","y":"public string DirectoryIterator::getExtension\n    ( void\n   )","p":null},"getFilename":{"s":"Retourne le nom de l&#039;entr\u00e9e courante du dossier","y":"public string DirectoryIterator::getFilename\n    ( void\n   )","p":null},"getGroup":{"s":"R\u00e9cup\u00e8re le groupe d&#039;un fichier","y":"public int DirectoryIterator::getGroup\n    ( void\n   )","p":null},"getInode":{"s":"R\u00e9cup\u00e8re l&#039;inode d&#039;un fichier","y":"public int DirectoryIterator::getInode\n    ( void\n   )","p":null},"getMTime":{"s":"R\u00e9cup\u00e8re l&#039;heure de la derni\u00e8re modification d&#039;un fichier","y":"public int DirectoryIterator::getMTime\n    ( void\n   )","p":null},"getOwner":{"s":"R\u00e9cup\u00e8re le propri\u00e9taire d&#039;un fichier","y":"public int DirectoryIterator::getOwner\n    ( void\n   )","p":null},"getPath":{"s":"Retourne le chemin du dossier","y":"public string DirectoryIterator::getPath\n    ( void\n   )","p":null},"getPathname":{"s":"Retourne le chemin et le nom de l&#039;entr\u00e9e courante du dossier","y":"public string DirectoryIterator::getPathname\n    ( void\n   )","p":null},"getPerms":{"s":"R\u00e9cup\u00e8re les permissions d&#039;un fichier","y":"public int DirectoryIterator::getPerms\n    ( void\n   )","p":null},"getSize":{"s":"R\u00e9cup\u00e8re la taille d&#039;un fichier","y":"public int DirectoryIterator::getSize\n    ( void\n   )","p":null},"getType":{"s":"R\u00e9cup\u00e8re le type d&#039;un fichier","y":"public string DirectoryIterator::getType\n    ( void\n   )","p":null},"isDir":{"s":"V\u00e9rifie si un fichier est un dossier","y":"public bool DirectoryIterator::isDir\n    ( void\n   )","p":null},"isDot":{"s":"Retourne TRUE si l&#039;entr\u00e9e courante est &#039;.&#039; ou &#039;..&#039;","y":"public bool DirectoryIterator::isDot\n    ( void\n   )","p":null},"isExecutable":{"s":"V\u00e9rifie si le fichier est ex\u00e9cutable","y":"public bool DirectoryIterator::isExecutable\n    ( void\n   )","p":null},"isFile":{"s":"V\u00e9rifie si l&#039;entr\u00e9e est un fichier normal","y":"public bool DirectoryIterator::isFile\n    ( void\n   )","p":null},"isLink":{"s":"V\u00e9rifie si le fichier est un lien symbolique","y":"public bool DirectoryIterator::isLink\n    ( void\n   )","p":null},"isReadable":{"s":"V\u00e9rifie si le fichier est accessible en lecture","y":"public bool DirectoryIterator::isReadable\n    ( void\n   )","p":null},"isWritable":{"s":"V\u00e9rifie si le fichier peut \u00eatre modifi\u00e9","y":"public bool DirectoryIterator::isWritable\n    ( void\n   )","p":null},"key":{"s":"Retourne l&#039;entr\u00e9e courante du dossier","y":"publicstring DirectoryIterator::key\n    ( void\n   )","p":null},"next":{"s":"Se d\u00e9place vers la prochaine entr\u00e9e","y":"publicvoid DirectoryIterator::next\n    ( void\n   )","p":null},"rewind":{"s":"Revient au d\u00e9but du dossier","y":"public void DirectoryIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"D\u00e9place le pointeur dans un it\u00e9rateur DirectoryIterator","y":"public\n   void \n   DirectoryIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"La position \u00e0 atteindre (les positions commencent \u00e0 z\u00e9ro)."}]},"__toString":{"s":"Lit le nom du fichier","y":"public\n   string \n   DirectoryIterator::__toString\n    ( void\n   )","p":null},"valid":{"s":"V\u00e9rifie si le r\u00e9pertoire contient encore des entr\u00e9es","y":"public bool DirectoryIterator::valid\n    ( void\n   )","p":null}},"ArrayIterator":{"__construct":{"s":"Construit un ArrayIterator","y":"public ArrayIterator::__construct\n    ([ mixed $array = array()\n   [, int $flags = 0\n  ]] )","p":[{"t":"array","d":"Le tableau ou l&#039;objet \u00e0 it\u00e9rer."},{"t":"flags","d":"Drapeaux permettant de contr\u00f4ler le\n       comportement de l&#039;objet ArrayIterator.\n       Voir la documentation de la m\u00e9thode\n       ArrayIterator::setFlags()."}]},"append":{"s":"Ajoute un \u00e9l\u00e9ment","y":"public void ArrayIterator::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"La valeur \u00e0 ajouter."}]},"asort":{"s":"Trie un tableau par les valeurs","y":"public void ArrayIterator::asort\n    ( void\n   )","p":null},"count":{"s":"Compte les \u00e9l\u00e9ments","y":"public int ArrayIterator::count\n    ( void\n   )","p":null},"current":{"s":"Retourne l&#039;entr\u00e9e courante du tableau","y":"public mixed ArrayIterator::current\n    ( void\n   )","p":null},"getArrayCopy":{"s":"R\u00e9cup\u00e8re la copie d&#039;un tableau","y":"public array ArrayIterator::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"R\u00e9cup\u00e8re un comportement","y":"public void ArrayIterator::getFlags\n    ( void\n   )","p":null},"key":{"s":"Retourne la cl\u00e9 courante du tableau","y":"public mixed ArrayIterator::key\n    ( void\n   )","p":null},"ksort":{"s":"Trie un tableau par les cl\u00e9s","y":"public void ArrayIterator::ksort\n    ( void\n   )","p":null},"natcasesort":{"s":"Trie naturellement un tableau, en ne tenant pas compte de la casse","y":"public void ArrayIterator::natcasesort\n    ( void\n   )","p":null},"natsort":{"s":"Trie naturellement un tableau","y":"public void ArrayIterator::natsort\n    ( void\n   )","p":null},"next":{"s":"Se d\u00e9place vers la prochaine entr\u00e9e","y":"public void ArrayIterator::next\n    ( void\n   )","p":null},"offsetExists":{"s":"V\u00e9rifie si une position existe","y":"public void ArrayIterator::offsetExists\n    ( string $index\n   )","p":[{"t":"index","d":"La position \u00e0 v\u00e9rifier."}]},"offsetGet":{"s":"R\u00e9cup\u00e8re la valeur pour une position","y":"public mixed ArrayIterator::offsetGet\n    ( string $index\n   )","p":[{"t":"index","d":"La position dont on doit r\u00e9cup\u00e9rer la valeur."}]},"offsetSet":{"s":"D\u00e9finit la valeur d&#039;une position","y":"public void ArrayIterator::offsetSet\n    ( string $index\n   , string $newval\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 d\u00e9finir."},{"t":"newval","d":"La nouvelle valeur \u00e0 stocker \u00e0 l&#039;index donn\u00e9."}]},"offsetUnset":{"s":"Efface la valeur d&#039;une position","y":"public void ArrayIterator::offsetUnset\n    ( string $index\n   )","p":[{"t":"index","d":"La position \u00e0 effacer."}]},"rewind":{"s":"Revient \u00e0 la position initiale","y":"public void ArrayIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"Avance \u00e0 une position donn\u00e9e","y":"public void ArrayIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"La position d\u00e9sir\u00e9e."}]},"serialize":{"s":"Lin\u00e9arisation","y":"public string ArrayIterator::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"D\u00e9finit des comportements","y":"public void ArrayIterator::setFlags\n    ( string $flags\n   )","p":[{"t":"flags","d":"Un masque, comme suit :\n       \n        \n         0 = Les propri\u00e9t\u00e9s d&#039;un objet ont leur fonctionnalit\u00e9 normale\n         lorsqu&#039;on y acc\u00e8de comme des listes (var_dump, foreach, etc.).\n        \n        \n         1 = Les indices d&#039;un tableau peuvent \u00eatre acc\u00e9d\u00e9s comme des\n         propri\u00e9t\u00e9s en mode lecture\/\u00e9criture."}]},"uasort":{"s":"Tri d\u00e9fini par l&#039;utilisateur","y":"public void ArrayIterator::uasort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de comparaison \u00e0 utiliser pour le tri."}]},"uksort":{"s":"Trie d\u00e9fini par l&#039;utilisateur","y":"public void ArrayIterator::uksort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de comparaison pour le tri."}]},"unserialize":{"s":"D\u00e9lin\u00e9arisation","y":"public string ArrayIterator::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"L&#039;objet ArrayIterator lin\u00e9aris\u00e9."}]},"valid":{"s":"V\u00e9rifie si un tableau contient d&#039;autres entr\u00e9es","y":"public bool ArrayIterator::valid\n    ( void\n   )","p":null}}}
