{"DateTime":{"add":{"s":"Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object","y":"public DateTime DateTime::add\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"interval","d":"A DateInterval object"}]},"__construct":{"s":"Returns new DateTime object","y":"","p":[{"t":"time","d":"A date\/time string. Valid formats are explained in Date and Time Formats."},{"t":"timezone","d":"A DateTimeZone object representing the\n      timezone of $time."}]},"createFromFormat":{"s":"Returns new DateTime object formatted according to the specified format","y":"public static DateTime DateTime::createFromFormat\n    ( string $format\n   , string $time\n   [, DateTimeZone $timezone\n  ] )","p":[{"t":"format","d":"The format that the passed in string should be in. See the\n      formatting options below. In most cases, the same letters as for the\n      date() can be used."},{"t":"time","d":"String representing the time."},{"t":"timezone","d":"A DateTimeZone object representing the\n      desired time zone."}]},"getLastErrors":{"s":"Returns the warnings and errors","y":"public static array DateTime::getLastErrors\n    ( void\n   )","p":null},"modify":{"s":"Alters the timestamp","y":"public DateTime DateTime::modify\n    ( string $modify\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"modify","d":"A date\/time string. Valid formats are explained in Date and Time Formats."}]},"__set_state":{"s":"The __set_state handler","y":"public static DateTime DateTime::__set_state\n    ( array $array\n   )","p":[{"t":"array","d":"Initialization array."}]},"setDate":{"s":"Sets the date","y":"public DateTime DateTime::setDate\n    ( int $year\n   , int $month\n   , int $day\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"year","d":"Year of the date."},{"t":"month","d":"Month of the date."},{"t":"day","d":"Day of the date."}]},"setISODate":{"s":"Sets the ISO date","y":"public DateTime DateTime::setISODate\n    ( int $year\n   , int $week\n   [, int $day = 1\n  ] )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"year","d":"Year of the date."},{"t":"week","d":"Week of the date."},{"t":"day","d":"Offset from the first day of the week."}]},"setTime":{"s":"Sets the time","y":"public DateTime DateTime::setTime\n    ( int $hour\n   , int $minute\n   [, int $second = 0\n  ] )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"hour","d":"Hour of the time."},{"t":"minute","d":"Minute of the time."},{"t":"second","d":"Second of the time."}]},"setTimestamp":{"s":"Sets the date and time based on an Unix timestamp","y":"public DateTime DateTime::setTimestamp\n    ( int $unixtimestamp\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"unixtimestamp","d":"Unix timestamp representing the date."}]},"setTimezone":{"s":"Sets the time zone for the DateTime object","y":"public DateTime DateTime::setTimezone\n    ( DateTimeZone $timezone\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"timezone","d":"A DateTimeZone object representing the\n      desired time zone."}]},"sub":{"s":"Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object","y":"public DateTime DateTime::sub\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"interval","d":"A DateInterval object"}]}},"ArrayObject":{"append":{"s":"Appends the value","y":"public void ArrayObject::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"The value being appended."}]},"asort":{"s":"Sort the entries by value","y":"public void ArrayObject::asort\n    ( void\n   )","p":null},"__construct":{"s":"Construct a new array object","y":"","p":[{"t":"input","d":"The input parameter accepts an \n       array or an Object."},{"t":"flags","d":"Flags to control the behaviour of the ArrayObject object.\n       See ArrayObject::setFlags()."},{"t":"iterator_class","d":"Specify the class that will be used for iteration of the ArrayObject object."}]},"count":{"s":"Get the number of public properties in the ArrayObject","y":"public int ArrayObject::count\n    ( void\n   )","p":null},"exchangeArray":{"s":"Exchange the array for another one.","y":"public array ArrayObject::exchangeArray\n    ( mixed $input\n   )","p":[{"t":"input","d":"The new array or object to exchange with the current array."}]},"getArrayCopy":{"s":"Creates a copy of the ArrayObject.","y":"public array ArrayObject::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"Gets the behavior flags.","y":"public int ArrayObject::getFlags\n    ( void\n   )","p":null},"getIterator":{"s":"Create a new iterator from an ArrayObject instance","y":"public ArrayIterator ArrayObject::getIterator\n    ( void\n   )","p":null},"getIteratorClass":{"s":"Gets the iterator classname for the ArrayObject.","y":"public string ArrayObject::getIteratorClass\n    ( void\n   )","p":null},"ksort":{"s":"Sort the entries by key","y":"public void ArrayObject::ksort\n    ( void\n   )","p":null},"natsort":{"s":"Sort entries using a &quot;natural order&quot; algorithm","y":"public void ArrayObject::natsort\n    ( void\n   )","p":null},"offsetExists":{"s":"Returns whether the requested index exists","y":"public bool ArrayObject::offsetExists\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index being checked."}]},"offsetGet":{"s":"Returns the value at the specified index","y":"public mixed ArrayObject::offsetGet\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index with the value."}]},"offsetSet":{"s":"Sets the value at the specified index to newval","y":"public void ArrayObject::offsetSet\n    ( mixed $index\n   , mixed $newval\n   )","p":[{"t":"index","d":"The index being set."},{"t":"newval","d":"The new value for the index."}]},"offsetUnset":{"s":"Unsets the value at the specified index","y":"public void ArrayObject::offsetUnset\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index being unset."}]},"serialize":{"s":"Serialize an ArrayObject","y":"public string ArrayObject::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"Sets the behavior flags.","y":"public void ArrayObject::setFlags\n    ( int $flags\n   )","p":[{"t":"flags","d":"The new ArrayObject behavior.\n       It takes on either a bitmask, or named constants. Using named\n       constants is strongly encouraged to ensure compatibility for future\n       versions."}]},"setIteratorClass":{"s":"Sets the iterator classname for the ArrayObject.","y":"public void ArrayObject::setIteratorClass\n    ( string $iterator_class\n   )","p":[{"t":"iterator_class","d":"The classname of the array iterator to use when iterating over this object."}]},"uasort":{"s":"Sort the entries with a user-defined comparison function and maintain key association","y":"public void ArrayObject::uasort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"Function cmp_function should accept two\n       parameters which will be filled by pairs of entries.\n       The comparison function must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the\n       second."}]},"uksort":{"s":"Sort the entries by keys using a user-defined comparison function","y":"public void ArrayObject::uksort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"The callback comparison function."}]},"unserialize":{"s":"Unserialize an ArrayObject","y":"public void ArrayObject::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"The serialized ArrayObject."}]}}}