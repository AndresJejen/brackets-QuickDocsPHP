{"DateTime":{"add":{"s":"Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object","y":"public DateTime DateTime::add\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"interval","d":"A DateInterval object"}]},"__construct":{"s":"Returns new DateTime object","y":"","p":[{"t":"time","d":"A date\/time string. Valid formats are explained in Date and Time Formats."},{"t":"timezone","d":"A DateTimeZone object representing the\n      timezone of $time."}]},"createFromFormat":{"s":"Returns new DateTime object formatted according to the specified format","y":"public static DateTime DateTime::createFromFormat\n    ( string $format\n   , string $time\n   [, DateTimeZone $timezone\n  ] )","p":[{"t":"format","d":"The format that the passed in string should be in. See the\n      formatting options below. In most cases, the same letters as for the\n      date() can be used."},{"t":"time","d":"String representing the time."},{"t":"timezone","d":"A DateTimeZone object representing the\n      desired time zone."}]},"getLastErrors":{"s":"Returns the warnings and errors","y":"public static array DateTime::getLastErrors\n    ( void\n   )","p":null},"modify":{"s":"Alters the timestamp","y":"public DateTime DateTime::modify\n    ( string $modify\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"modify","d":"A date\/time string. Valid formats are explained in Date and Time Formats."}]},"__set_state":{"s":"The __set_state handler","y":"public static DateTime DateTime::__set_state\n    ( array $array\n   )","p":[{"t":"array","d":"Initialization array."}]},"setDate":{"s":"Sets the date","y":"public DateTime DateTime::setDate\n    ( int $year\n   , int $month\n   , int $day\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"year","d":"Year of the date."},{"t":"month","d":"Month of the date."},{"t":"day","d":"Day of the date."}]},"setISODate":{"s":"Sets the ISO date","y":"public DateTime DateTime::setISODate\n    ( int $year\n   , int $week\n   [, int $day = 1\n  ] )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"year","d":"Year of the date."},{"t":"week","d":"Week of the date."},{"t":"day","d":"Offset from the first day of the week."}]},"setTime":{"s":"Sets the time","y":"public DateTime DateTime::setTime\n    ( int $hour\n   , int $minute\n   [, int $second = 0\n  ] )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"hour","d":"Hour of the time."},{"t":"minute","d":"Minute of the time."},{"t":"second","d":"Second of the time."}]},"setTimestamp":{"s":"Sets the date and time based on an Unix timestamp","y":"public DateTime DateTime::setTimestamp\n    ( int $unixtimestamp\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"unixtimestamp","d":"Unix timestamp representing the date."}]},"setTimezone":{"s":"Sets the time zone for the DateTime object","y":"public DateTime DateTime::setTimezone\n    ( DateTimeZone $timezone\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"timezone","d":"A DateTimeZone object representing the\n      desired time zone."}]},"sub":{"s":"Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object","y":"public DateTime DateTime::sub\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Procedural style only: A DateTime object\nreturned by date_create().\nThe function modifies this object."},{"t":"interval","d":"A DateInterval object"}]}},"ArrayObject":{"append":{"s":"Appends the value","y":"public void ArrayObject::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"The value being appended."}]},"asort":{"s":"Sort the entries by value","y":"public void ArrayObject::asort\n    ( void\n   )","p":null},"__construct":{"s":"Construct a new array object","y":"","p":[{"t":"input","d":"The input parameter accepts an \n       array or an Object."},{"t":"flags","d":"Flags to control the behaviour of the ArrayObject object.\n       See ArrayObject::setFlags()."},{"t":"iterator_class","d":"Specify the class that will be used for iteration of the ArrayObject object."}]},"count":{"s":"Get the number of public properties in the ArrayObject","y":"public int ArrayObject::count\n    ( void\n   )","p":null},"exchangeArray":{"s":"Exchange the array for another one.","y":"public array ArrayObject::exchangeArray\n    ( mixed $input\n   )","p":[{"t":"input","d":"The new array or object to exchange with the current array."}]},"getArrayCopy":{"s":"Creates a copy of the ArrayObject.","y":"public array ArrayObject::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"Gets the behavior flags.","y":"public int ArrayObject::getFlags\n    ( void\n   )","p":null},"getIterator":{"s":"Create a new iterator from an ArrayObject instance","y":"public ArrayIterator ArrayObject::getIterator\n    ( void\n   )","p":null},"getIteratorClass":{"s":"Gets the iterator classname for the ArrayObject.","y":"public string ArrayObject::getIteratorClass\n    ( void\n   )","p":null},"ksort":{"s":"Sort the entries by key","y":"public void ArrayObject::ksort\n    ( void\n   )","p":null},"natsort":{"s":"Sort entries using a &quot;natural order&quot; algorithm","y":"public void ArrayObject::natsort\n    ( void\n   )","p":null},"offsetExists":{"s":"Returns whether the requested index exists","y":"public bool ArrayObject::offsetExists\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index being checked."}]},"offsetGet":{"s":"Returns the value at the specified index","y":"public mixed ArrayObject::offsetGet\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index with the value."}]},"offsetSet":{"s":"Sets the value at the specified index to newval","y":"public void ArrayObject::offsetSet\n    ( mixed $index\n   , mixed $newval\n   )","p":[{"t":"index","d":"The index being set."},{"t":"newval","d":"The new value for the index."}]},"offsetUnset":{"s":"Unsets the value at the specified index","y":"public void ArrayObject::offsetUnset\n    ( mixed $index\n   )","p":[{"t":"index","d":"The index being unset."}]},"serialize":{"s":"Serialize an ArrayObject","y":"public string ArrayObject::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"Sets the behavior flags.","y":"public void ArrayObject::setFlags\n    ( int $flags\n   )","p":[{"t":"flags","d":"The new ArrayObject behavior.\n       It takes on either a bitmask, or named constants. Using named\n       constants is strongly encouraged to ensure compatibility for future\n       versions."}]},"setIteratorClass":{"s":"Sets the iterator classname for the ArrayObject.","y":"public void ArrayObject::setIteratorClass\n    ( string $iterator_class\n   )","p":[{"t":"iterator_class","d":"The classname of the array iterator to use when iterating over this object."}]},"uasort":{"s":"Sort the entries with a user-defined comparison function and maintain key association","y":"public void ArrayObject::uasort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"Function cmp_function should accept two\n       parameters which will be filled by pairs of entries.\n       The comparison function must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the\n       second."}]},"uksort":{"s":"Sort the entries by keys using a user-defined comparison function","y":"public void ArrayObject::uksort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"The callback comparison function."}]},"unserialize":{"s":"Unserialize an ArrayObject","y":"public void ArrayObject::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"The serialized ArrayObject."}]}},"Directory":{"close":{"s":"Close directory handle","y":"public void Directory::close\n    ([ resource $dir_handle\n  ] )","p":null},"read":{"s":"Read entry from directory handle","y":"public string Directory::read\n    ([ resource $dir_handle\n  ] )","p":null},"rewind":{"s":"Rewind directory handle","y":"public void Directory::rewind\n    ([ resource $dir_handle\n  ] )","p":null}},"DirectoryIterator":{"__construct":{"s":"Constructs a new directory iterator from a path","y":"","p":[{"t":"path","d":"The path of the directory to traverse."}]},"current":{"s":"Return the current DirectoryIterator item.","y":"public DirectoryIterator DirectoryIterator::current\n    ( void\n   )","p":null},"getATime":{"s":"Get last access time of the current DirectoryIterator item","y":"public int DirectoryIterator::getATime\n    ( void\n   )","p":null},"getBasename":{"s":"Get base name of current DirectoryIterator item.","y":"public\n   string \n   DirectoryIterator::getBasename\n    ([ \n    string\n     $suffix\n   \n  ] )","p":[{"t":"suffix","d":"If the base name ends in suffix, \n       this will be cut."}]},"getCTime":{"s":"Get inode change time of the current DirectoryIterator item","y":"public int DirectoryIterator::getCTime\n    ( void\n   )","p":null},"getExtension":{"s":"Gets the file extension","y":"public string DirectoryIterator::getExtension\n    ( void\n   )","p":null},"getFilename":{"s":"Return file name of current DirectoryIterator item.","y":"public string DirectoryIterator::getFilename\n    ( void\n   )","p":null},"getGroup":{"s":"Get group for the current DirectoryIterator item","y":"public int DirectoryIterator::getGroup\n    ( void\n   )","p":null},"getInode":{"s":"Get inode for the current DirectoryIterator item","y":"public int DirectoryIterator::getInode\n    ( void\n   )","p":null},"getMTime":{"s":"Get last modification time of current DirectoryIterator item","y":"public int DirectoryIterator::getMTime\n    ( void\n   )","p":null},"getOwner":{"s":"Get owner of current DirectoryIterator item","y":"public int DirectoryIterator::getOwner\n    ( void\n   )","p":null},"getPath":{"s":"Get path of current Iterator item without filename","y":"public string DirectoryIterator::getPath\n    ( void\n   )","p":null},"getPathname":{"s":"Return path and file name of current DirectoryIterator item","y":"public string DirectoryIterator::getPathname\n    ( void\n   )","p":null},"getPerms":{"s":"Get the permissions of current DirectoryIterator item","y":"public int DirectoryIterator::getPerms\n    ( void\n   )","p":null},"getSize":{"s":"Get size of current DirectoryIterator item","y":"public int DirectoryIterator::getSize\n    ( void\n   )","p":null},"getType":{"s":"Determine the type of the current DirectoryIterator item","y":"public string DirectoryIterator::getType\n    ( void\n   )","p":null},"isDir":{"s":"Determine if current DirectoryIterator item is a directory","y":"public bool DirectoryIterator::isDir\n    ( void\n   )","p":null},"isDot":{"s":"Determine if current DirectoryIterator item is &#039;.&#039; or &#039;..&#039;","y":"public bool DirectoryIterator::isDot\n    ( void\n   )","p":null},"isExecutable":{"s":"Determine if current DirectoryIterator item is executable","y":"public bool DirectoryIterator::isExecutable\n    ( void\n   )","p":null},"isFile":{"s":"Determine if current DirectoryIterator item is a regular file","y":"public bool DirectoryIterator::isFile\n    ( void\n   )","p":null},"isLink":{"s":"Determine if current DirectoryIterator item is a symbolic link","y":"public bool DirectoryIterator::isLink\n    ( void\n   )","p":null},"isReadable":{"s":"Determine if current DirectoryIterator item can be read","y":"public bool DirectoryIterator::isReadable\n    ( void\n   )","p":null},"isWritable":{"s":"Determine if current DirectoryIterator item can be written to","y":"public bool DirectoryIterator::isWritable\n    ( void\n   )","p":null},"key":{"s":"Return the key for the current DirectoryIterator item","y":"public string  DirectoryIterator::key\n    ( void\n   )","p":null},"next":{"s":"Move forward to next DirectoryIterator item","y":"public void  DirectoryIterator::next\n    ( void\n   )","p":null},"rewind":{"s":"Rewind the DirectoryIterator back to the start","y":"public void DirectoryIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"Seek to a DirectoryIterator item","y":"public\n   void \n   DirectoryIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"The zero-based numeric position to seek to."}]},"__toString":{"s":"Get file name as a string","y":"public\n   string \n   DirectoryIterator::__toString\n    ( void\n   )","p":null},"valid":{"s":"Check whether current DirectoryIterator position is a valid file","y":"public bool DirectoryIterator::valid\n    ( void\n   )","p":null}},"ArrayIterator":{"__construct":{"s":"Construct an ArrayIterator","y":"public ArrayIterator::__construct\n    ([ mixed $array = array()\n   [, int $flags = 0\n  ]] )","p":[{"t":"array","d":"The array or object to be iterated on."},{"t":"flags","d":"Flags to control the behaviour of the ArrayIterator object.\n       See ArrayIterator::setFlags()."}]},"append":{"s":"Append an element","y":"public void ArrayIterator::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"The value to append."}]},"asort":{"s":"Sort array by values","y":"public void ArrayIterator::asort\n    ( void\n   )","p":null},"count":{"s":"Count elements","y":"public int ArrayIterator::count\n    ( void\n   )","p":null},"current":{"s":"Return current array entry","y":"public mixed ArrayIterator::current\n    ( void\n   )","p":null},"getArrayCopy":{"s":"Get array copy","y":"public array ArrayIterator::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"Get flags","y":"public void ArrayIterator::getFlags\n    ( void\n   )","p":null},"key":{"s":"Return current array key","y":"public mixed ArrayIterator::key\n    ( void\n   )","p":null},"ksort":{"s":"Sort array by keys","y":"public void ArrayIterator::ksort\n    ( void\n   )","p":null},"natcasesort":{"s":"Sort an array naturally, case insensitive","y":"public void ArrayIterator::natcasesort\n    ( void\n   )","p":null},"natsort":{"s":"Sort an array naturally","y":"public void ArrayIterator::natsort\n    ( void\n   )","p":null},"next":{"s":"Move to next entry","y":"public void ArrayIterator::next\n    ( void\n   )","p":null},"offsetExists":{"s":"Check if offset exists","y":"public void ArrayIterator::offsetExists\n    ( string $index\n   )","p":[{"t":"index","d":"The offset being checked."}]},"offsetGet":{"s":"Get value for an offset","y":"public mixed ArrayIterator::offsetGet\n    ( string $index\n   )","p":[{"t":"index","d":"The offset to get the value from."}]},"offsetSet":{"s":"Set value for an offset","y":"public void ArrayIterator::offsetSet\n    ( string $index\n   , string $newval\n   )","p":[{"t":"index","d":"The index to set for."},{"t":"newval","d":"The new value to store at the index."}]},"offsetUnset":{"s":"Unset value for an offset","y":"public void ArrayIterator::offsetUnset\n    ( string $index\n   )","p":[{"t":"index","d":"The offset to unset."}]},"rewind":{"s":"Rewind array back to the start","y":"public void ArrayIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"Seek to position","y":"public void ArrayIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"The position to seek to."}]},"serialize":{"s":"Serialize","y":"public string ArrayIterator::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"Set behaviour flags","y":"public void ArrayIterator::setFlags\n    ( string $flags\n   )","p":[{"t":"flags","d":"A bitmask as follows:\n       \n        \n         0 = Properties of the object have their normal functionality\n         when accessed as list (var_dump, foreach, etc.).\n        \n        \n         1 = Array indices can be accessed as properties in read\/write."}]},"uasort":{"s":"User defined sort","y":"public void ArrayIterator::uasort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"The compare function used for the sort."}]},"uksort":{"s":"User defined sort","y":"public void ArrayIterator::uksort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"The compare function used for the sort."}]},"unserialize":{"s":"Unserialize","y":"public string ArrayIterator::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"The serialized ArrayIterator object to be unserialized."}]},"valid":{"s":"Check whether array contains more entries","y":"public bool ArrayIterator::valid\n    ( void\n   )","p":null}}}
